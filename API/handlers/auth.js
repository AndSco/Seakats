const db = require("../models"); // automatically gets index.js file
const jwt = require("jsonwebtoken");
const config = require("../config");

exports.signup = async function(req, res, next) {
  try {
    let newUser = await db.User.create(req.body);
    console.log("NEW USER", newUser);
    const {
      username,
      email,
      mobile,
      profilePic,
      _id,
      nextOfKinName,
      nextOfKinNumber
    } = newUser;

    let token = jwt.sign(
      {
        username,
        email,
        mobile,
        profilePic
      },
      config.jwtSecret,
      {
        expiresIn: "7d"
      }
    );

    const expiryTimeStamp = jwt.verify(token, config.jwtSecret).exp * 1000;
    console.log("Expires on", new Date(expiryTimeStamp).toISOString());

    return res.status(200).json({
      username,
      email,
      mobile,
      profilePic,
      nextOfKinName,
      nextOfKinNumber,
      token,
      _id,
      expiryTimeStamp
    });
  } catch (err) {
    console.log(err);
    if (err.code === 11000) {
      return next("Sorry, username and/or email taken already");
    }
    return next(err.message);
  }
};

exports.login = async function(req, res, next) {
  try {
    const userToLogin = await db.User.findOne({ username: req.body.username })
      .populate("trips")
      .exec();
    console.log("user to login", userToLogin);

    if (userToLogin) {
      const {
        username,
        email,
        mobile,
        profilePic,
        _id,
        nextOfKinName,
        nextOfKinNumber,
        trips
      } = userToLogin;
      let passwordMatches = await userToLogin.comparePassword(
        req.body.password
      ); //any user generated by User model has the comparePassword method

      if (passwordMatches) {
        let token = jwt.sign(
          {
            username,
            email,
            mobile,
            profilePic
          },
          config.jwtSecret,
          {
            expiresIn: 10000
          }
        );

        const expiryTimeStamp = jwt.verify(token, config.jwtSecret).exp * 1000;
        console.log("Expires on", new Date(expiryTimeStamp).toISOString());

        return res.status(200).json({
          username,
          email,
          mobile,
          profilePic,
          nextOfKinName,
          nextOfKinNumber,
          token,
          _id,
          expiryTimeStamp,
          trips
        });
      } else {
        // throw new Error("Invalid password!");
        return next({
          status: 400,
          message: "Invalid password"
        });
      }
    } else {
      return next({
        status: 400,
        message: "Invalid username"
      });
    }
  } catch (err) {
    return next(err);
  }
};
